class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        triplets = []
        nums.sort()

        for i in range(len(nums)):
            # if current num is greater than 0, all numbers on the right > 0 -> cannot sum to 0
            if nums[i] > 0: 
                break

            # To avoid duplicate
            if i > 0 and nums[i] == nums[i-1]:
                continue

            # Find all pairs
            pairs = self.findAllPairsEqualTarget(nums, i + 1, -nums[i])

            for pair in pairs:
                triplets.append([nums[i], pair[0], pair[1]])
            
        return triplets
            
    def findAllPairsEqualTarget(self, nums: List[int], start: int, target: int):
        left, right = start, len(nums) - 1
        pairs = []

        while left < right:
            pair_sum = nums[left] + nums[right]

            if pair_sum == target:
                pairs.append([nums[left], nums[right]])
                left += 1

                # To avoid duplicate, move left until there is a different number.
                while left < right and nums[left] == nums[left - 1]:
                    left += 1
            elif pair_sum > target:
                right -= 1
            else:
                left += 1
        
        return pairs
